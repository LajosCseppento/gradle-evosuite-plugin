package com.github.cseppento.gradle.evosuite;

import com.github.cseppento.gradle.evosuite.internal.DefaultEvoSuiteGradleExtension;
import org.gradle.api.GradleException;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.logging.Logger;
import org.gradle.api.plugins.JavaPluginConvention;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.SourceSetContainer;
import org.gradle.api.tasks.SourceSetOutput;
import org.gradle.api.tasks.testing.Test;

import java.util.Objects;

/**
 * This plugin integrates EvoSuite test generation and execution with Gradle.
 */
public class EvoSuiteGradlePlugin implements Plugin<Project> {
    private static final String DEFAULT_TOOL_VERSION = "1.0.5";

    private static final String EXTENSION_NAME = "evosuite";
    private static final String TEST_GENERATION_CONFIG_NAME = "evosuiteGeneration";
    private static final String SOURCE_SET_NAME = "evosuiteTest";
    private static final String SOURCE_SET_DIR_NAME = "evoTest";

    private Project project;
    private Logger logger;
    private SourceSet sourceSet;
    private EvoSuiteGradleExtension extension;

    @Override
    public void apply(Project project) {
        Objects.requireNonNull(project);
        this.project = project;
        this.logger = project.getLogger();

        if (project.getExtensions().findByName(EXTENSION_NAME) != null) {
            logger.info("The {] extension has been already applied", EXTENSION_NAME);
            return;
        }
        if (project.getPluginManager().findPlugin("java") == null) {
            throw new GradleException("Please apply the java plugin first in order to use the EvoSuite plugin");
        }

        extension = project.getExtensions().create(
                EvoSuiteGradleExtension.class, EXTENSION_NAME, DefaultEvoSuiteGradleExtension.class,
                project, DEFAULT_TOOL_VERSION);

        Configuration config = project.getConfigurations().create(TEST_GENERATION_CONFIG_NAME);
        // TODO Add EvoSuite dependency, replace if version is updated in the extension
        //  project.getDependencies().add(TEST_GENERATION_CONFIG_NAME, "");

        createSourceSet();
        createTasks();

        // TODO detect IDE plugins (even if applied later) and add sourceSet to IDE config
    }

    private void createSourceSet() {
        SourceSetContainer sourceSets = project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets();

        sourceSet = sourceSets.create(SOURCE_SET_NAME);

        sourceSet.getJava().setSrcDirs(project.files(String.format("src/%s/java", SOURCE_SET_DIR_NAME)));
        sourceSet.getResources().setSrcDirs(project.files(String.format("src/%s/resources", SOURCE_SET_DIR_NAME)));

        SourceSetOutput mainOutput = sourceSets.getByName("main").getOutput();
        sourceSet.setCompileClasspath(project.files(sourceSet.getCompileClasspath(), mainOutput));
        sourceSet.setRuntimeClasspath(project.files(sourceSet.getRuntimeClasspath(), mainOutput));
    }

    private void createTasks() {
        // TODO Task evosuiteGen
        // TODO task evosuiteListClasses
        // TODO task evosuiteHelp
        // TODO task evosuiteParameters

        // Task: evosuiteTest : Test
        Test evosuiteTest = project.getTasks().create("evosuiteTest", Test.class);
        evosuiteTest.setGroup("EvoSuite");
        evosuiteTest.setDescription("Runs the tests generated by EvoSuite.");

        evosuiteTest.setTestClassesDirs(sourceSet.getOutput().getClassesDirs());
        evosuiteTest.setClasspath(sourceSet.getRuntimeClasspath());

        evosuiteTest.mustRunAfter(project.getTasks().getByName("test"));

        project.getTasks().getByName("check").dependsOn(evosuiteTest);
    }
}
